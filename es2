#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct c { char c; 
                   struct c * next; } Cifra;
typedef Cifra * NumTelefono;
typedef struct con { char nome[1000]; 
					 char IBAN[1000];
                     NumTelefono numero; 
                     struct con * next; } Correntista;
typedef Correntista * ListaConti;
NumTelefono InsInTestaCifra( NumTelefono lista, char elem );
NumTelefono InsInFondoCifra( NumTelefono lista,char elem );
ListaConti costruisciListaConti();
NumTelefono costruisciNumero(char * telefono);
ListaConti InsInFondoCorrentista( ListaConti lista, char * nome, char * IBAN, char * telefono );

void VisualizzaListaConti(ListaConti lista);
void VisualizzaLista(NumTelefono lista);
NumTelefono correggiNumero(NumTelefono numero);
NumTelefono creaNodo(char c);
ListaConti correggi(ListaConti conti);

int main(){
    ListaConti conti;
    conti=costruisciListaConti();
    VisualizzaListaConti(conti);
    conti->numero=correggiNumero(conti->numero);
    conti=correggi(conti);
    VisualizzaListaConti(conti);
    
    return 0;
}

NumTelefono correggiNumero(NumTelefono numero){
    if(numero==NULL)
    	return NULL;
    if(numero->c=='+')
       return numero;
    NumTelefono testa=NULL;
	NumTelefono tmp=NULL;
    if(numero->c=='0' && numero->next->c=='0'){
       testa=creaNodo('+');
       tmp=numero;
       testa->next=numero->next->next;
       free(tmp->next);
       free(tmp);
       tmp=NULL;
       return testa;
	}
	NumTelefono start=NULL;
	if(numero->c!=0 || (numero->c==0 && numero->next->c!=0)){
		start=creaNodo('+');
		start->next=creaNodo('3');
		start->next->next=creaNodo('9');
		start->next->next->next=numero;
		return start;
	}    
}

NumTelefono creaNodo(char c){
	NumTelefono nodo=malloc(sizeof(Cifra));
	nodo->c=c;
	nodo->next=NULL;
return nodo;
}

ListaConti correggi(ListaConti conti){
	ListaConti testa=conti;
	while(conti!=NULL){
		conti->numero=correggiNumero(conti->numero);
	conti=conti->next;
	}
	return testa;
}

ListaConti costruisciListaConti(){
	ListaConti lis=NULL;
	int i=0;
	char nomi[5][20]={"Alessandro","Marco","Giacomo","Giovanni","Matteo"};
	char IBAN[5][20]={"IT020000000000000","IT020000000000000","IT020000000000000","IT020000000000000","IT020000000000000"};
	char telefoni[5][20]={"333333333","+3956789","003956565656","03456678","4444444"};
	for(i=0;i<5;i++)
		lis=InsInFondoCorrentista(lis,nomi[i],IBAN[i],telefoni[i]);
	return lis; }

NumTelefono InsInTestaCifra ( NumTelefono lista, char elem ) {
	NumTelefono punt;
	punt = (NumTelefono) malloc(sizeof(Cifra));
	punt->c = elem;	punt->next = lista;		
	return  punt;}

NumTelefono InsInFondoCifra( NumTelefono lista,char elem ) {
    NumTelefono punt;
    if( lista==NULL ) {
        punt = (NumTelefono)malloc( sizeof(Cifra) );
        punt->next = NULL; punt->c = elem; 
        return  punt;
    } else {   lista->next = InsInFondoCifra( lista->next, elem );
	           return lista;   }
	}

NumTelefono costruisciNumero(char * telefono){
	int i;
	NumTelefono lis=NULL;
	for(i=0;telefono[i]!='\0';i++)
		lis=InsInFondoCifra(lis,telefono[i]);
	return lis;}

ListaConti InsInFondoCorrentista( ListaConti lista, char * nome, char * IBAN, char * telefono ) {
    ListaConti punt;
    if( lista==NULL ) {
        punt = (ListaConti)malloc( sizeof(Correntista) );
        punt->next = NULL; 
		strcpy(punt->nome, nome); 
		strcpy(punt->IBAN, IBAN); 
		punt->numero=costruisciNumero(telefono); 
        return  punt;
    } else {   lista->next = InsInFondoCorrentista( lista->next, nome, IBAN, telefono );
	           return lista;   }
}

void VisualizzaListaConti( ListaConti lista ) {
 if ( lista==NULL )
 printf("\n");
 else {
 printf(" %s, IBAN: %s, Numero:", lista->nome, lista->IBAN);
 VisualizzaLista(lista->numero);
 printf("\n");
 VisualizzaListaConti( lista->next); 
 }
}

void VisualizzaLista( NumTelefono lista ) {
 if ( lista==NULL )
 printf("\n");
 else {
 printf("%c", lista->c);
 VisualizzaLista( lista->next ); 
 }
}
